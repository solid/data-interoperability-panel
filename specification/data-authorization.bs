Authorization Flows {#authorization}
=====================

Authorization represents several key elements that
work together to grant, adjust, and rescind access to data controlled
by a [=Social Agent=].

Key authorization flows are facilitated by an [=Authorization Agent=]
on behalf of a [=Social Agent=].

<table class="data tree" align="left">
  <col>
  <col>
  <thead>
    <tr>
      <th>Flow</th>
      <th>Scenario</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><b>Application Requests Access</b></td>
      <td>A [=Social Agent=] elects to use a new
        [=Application=]. The [=Application=] prompts the
        [=Social Agent=] for access to data in their control.
        [=Access Needs=] are provided by the [=Application=].
        </td>
    </tr>
    <tr>
      <td><b>Another Social Agent Requests Access</b></td>
      <td>A [=Social Agent=] requests access to data owned
        by another [=Social Agent=]. [=Access Needs=] are provided
        in an [=Access Request=]. Resultant notification is
        provided through an [=Access Receipt=].</td>
    </tr>
    <tr>
      <td><b>Social Agent Shares Access</b></td>
      <td>A [=Social Agent=] using an [=Application=] elects to share
        access to data in their control with another [=Social Agent=]
        that did not request it. [=Access Needs=] are provided by
        [=Application=]. Notification that access was shared is provided
        through an [=Access Receipt=].</td>
    </tr>
  </tbody>
</table>

<div class="assertion">

<b>Each authorization flow listed above uses the following pattern:</b>

1. A requesting [=Agent=] expresses
    their [[#needs|Access Needs]] to a given [=Social Agent=] for data in their control.
2. [[#needs|Access Needs]] are processed and presented to the [=Social Agent=]
    by their [=Authorization Agent=].
3.  The [=Social Agent's=] access decisions are captured and enacted
    through [[#authorizations]].
4.  The requesting [=Agent=] looks for an [=Access Grant=]
    stored in a corresponding [=Agent Registration=] in the [=Agent Registry=] of the
    data owner. This [=Access Grant=] tells them exactly what they have access to.

</div>

Slight variations concerning where [=Access Needs=] are sourced from, and
how notification of access is provided, are the only differences from
one flow to another.

<figure>
    <table class="data tree" align="left">
      <col>
      <col>
      <thead>
        <tr>
          <th>Step</th>
          <th>Description</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td><b>1</b></td>
          <td>Alice's finds an [=Application=] called Projectron that she'd like
            to use to manage her Projects and Tasks.</td>
        </tr>
        <tr>
          <td><b>2</b></td>
          <td>Alice provides her [=WebID=] to Projectron</td>
        </tr>
        <tr>
          <td><b>3</b></td>
          <td>Projectron dereferences her [=WebID=] and retrieves her IdP and [=Authorization Agent=] from her [=Identity Profile Document=]</td>
        </tr>
        <tr>
          <td><b>4</b></td>
          <td>Projectron [[#agent-registration-discovery|asks]] Alice's [=Authorization Agent=] if Alice already has an [=Application Registration=] for Projectron</td>
        </tr>
        <tr>
          <td><b>5</b></td>
          <td>Projectron receives a `401 Not Authorized`, because Alice / Projectron needs to authenticate first</td>
        </tr>
        <tr>
          <td><b>6</b></td>
          <td>Projectron initiates a [[SOLID-OIDC]] flow with Alice's Identity Provider and receives a DPOP-bound Access Token and Proof</td>
        </tr>
        <tr>
          <td><b>7</b></td>
          <td>Now authenticated, Projectron [[#agent-registration-discovery|asks]] Alice's [=Authorization Agent=] again for a Projectron [=Application Registration=]</td>
        </tr>
        <tr>
          <td><b>8</b></td>
          <td>Alice's [=Authorization Agent=] checks the [=Agent Registry=] in Alice's Pod for a Projectron [=Application Registration=]</td>
        </tr>
        <tr>
          <td><b>9</b></td>
          <td>No [=Application Registration=] for Projectron is found.
          Projectron now knows that Alice hasn't given it permission to access her data, so it must ask.</td>
        </tr>
        <tr>
          <td><b>10</b></td>
          <td>Projectron redirects Alice to her [=Authorization Agent=], supplying its [=identity=] for context</td>
        </tr>
        <tr>
          <td><b>11</b></td>
          <td>Alice's [=Authorization Agent=] dereferences the supplied Projectron [=identity=], retrieving Projection's
          [=Application=] profile graph and corresponding [=Access Need Groups=] from the [=Identity Profile Document=],
          as well as <code>redirect_uri</code></td>
        </tr>
        <tr>
          <td><b>12</b></td>
          <td>Alice's [=Authorization Agent=] presents the [=Access Need Groups=] from Projectron's [=Application=]
          profile graph, so that Alice understands what kind of data is being requested, and why.</td>
        </tr>
        <tr>
          <td><b>13</b></td>
          <td>Alice's chooses the [[#access-scopes|scope of access]] that Projectron will receive to the data it has
          asked for access to via the presented [=Access Needs=].</td>
        </tr>
        <tr>
          <td><b>14-16</b></td>
          <td>Alice's [=Authorization Agent=] records her decision as an [=Access Authorization=] in Alice's
            [=Authorization Registry=]. An [=Application Registration=] is created for Projectron in
            Alice's [=Agent Registry=]. An [=Access Grant=] and corresponding [=Data Grants=] are generated
            from the [=Access Authorization=] and stored in the Projectron [=Application Registration=].
        </tr>
        <tr>
          <td><b>17</b></td>
          <td>Alice's [=Authorization Agent=] redirects her back to Projectron now that the appropriate access has been granted</td>
        </tr>
        <tr>
          <td><b>18</b></td>
          <td>Projectron [[#agent-registration-discovery|asks]] Alice's [=Authorization Agent=] again for a Projectron [=Application Registration=]</td>
        </tr>
        <tr>
          <td><b>19</b></td>
          <td>Alice's [=Authorization Agent=] finds the newly created Projectron [=Application Registration=] in the [=Agent Registry=] in Alice's Pod</td>
        </tr>
        <tr>
          <td><b>20</b></td>
          <td>Alice's [=Authorization Agent=] [[#agent-registration-discovery|provides]] the URI of the [=Application Registration=] to Projectron</td>
        </tr>
        <tr>
          <td><b>21</b></td>
          <td>Projectron learns what access it received through the [=Access Grant=] in Alice's Projectron [=Application Registration=]</td>
        </tr>
        <tr>
          <td><b>22</b></td>
          <td>Projectron may now function as intended, within the scope of authorization it was given by Alice.</td>
        </tr>
      </tbody>
    </table>
</figure>

<img class="sequence-diagram" src="diagrams/application-requests-access-flow.seq.mmd.svg" />

## Authorization Agent ## {#authorization-agent}

An <dfn>Authorization Agent</dfn> is an [=Application=] designated by
a [=Social Agent=] to be responsible for managing the access to data
under their control, linked via their [=Registry Set=].

Any requests for access to the [=Social Agent=]
are processed by the [=Authorization Agent=].
Similarly, any decisions by the [=Social Agent=] to share data with another [=Agent=]
are processed by the [=Authorization Agent=].

### Authorization Agent Discovery ### {#authorization-agent-discovery}

The [=Authorization Agent=] for a given [=Social Agent=] can be discovered
by de-referencing the [=identity=] of that [=Social Agent=], and extracting
the object value of the `interop:hasAuthorizationAgent` statement from the
[=Social Agent=] graph in the returned [=identity profile document=].

The extracted [=Authorization Agent=] IRI <em class="rfc2119">MUST</em> be
unique to that [=Social Agent=]. In scenarios where the [=Authorization Agent=]
services multiple [=Social Agents=], this may be facilitated through
a unique sub-domain (see example below) or path.

<figure>
  <figcaption>[=Social Agent=] at https://alice.example/#id -
  <a href="snippets/alice.example/alice.example.ttl">View</a>
</figcaption>
  <pre class=include-code>
  path: snippets/alice.example/alice.example.ttl
  highlight: turtle
  show: 9-20
  line-highlight: 14
  </pre>
</figure>

### Agent Registration Discovery ### {#agent-registration-discovery}

An [=Agent=] that needs to discover whether a target [=Social Agent=] has
a corresponding [=Agent Registration=] for them can query the
[=Authorization Agent=] for that target [=Social Agent=].

To discover a corresponding [=Agent Regsitration=] the requesting [=Agent=]
may perform an `HTTP HEAD` or `HTTP GET` request on the IRI of the
[=Authorization Agent=] for the target [=Social Agent=].

The response will include an `HTTP Link` header relating the [=Agent Registration=]
to the [=Agent=] making the request via the
`http://www.w3.org/ns/solid/interop#registeredAgent` link relation.

<figure>
  <figcaption>HEAD request to and response from Authorization Agent</figcaption>
  <pre highlight=http>
    HEAD / HTTP/1.1
    Host: alice.jarvis.example
    Authorization: DPoP ....
  </pre>
  <pre highlight=http line-highlight=3>
    HTTP/1.1 200 OK
    Link: &lt;https://projectron.example/#app&gt;;
      anchor="https://alice.jarvis.example/bcf22534-0187-4ae4-b88f-fe0f9fa96659";
      rel="http://www.w3.org/ns/solid/interop#registeredAgent"
  </pre>
</figure>
