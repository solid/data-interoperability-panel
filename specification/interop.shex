PREFIX interop: <http://www.w3.org/ns/solid/interop#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
PREFIX sts: <http://www.w3.org/ns/shapetrees-schema#>
PREFIX shex: <http://www.w3.org/ns/shex>
PREFIX acl: <http://www.w3.org/ns/auth/acl#>
PREFIX skos: <http://www.w3.org/2004/02/skos/core#>

<#SocialAgentShape> {
  a [ interop:SocialAgent ] ;
  interop:hasRegistrySet                    IRI // shex:reference <#RegistrySetShape> ;
  interop:hasAuthorizationAgent             IRI // shex:reference <#ApplicationShape> ;
}

<#RegistrySetShape> {
  a [ interop:RegistrySet ] ;
  interop:hasAgentRegistry                  IRI  // shex:reference <#AgentRegistryShape> ;
  interop:hasAuthorizationRegistry          IRI  // shex:reference <#AuthorizationRegistryShape> ;
  interop:hasDataRegistry                   IRI* // shex:reference <#DataRegistryShape>
}

<#RegistrationShape> {
  $<#CommonRegistrationProperties> (
    interop:registeredBy                    IRI // shex:reference <#AgentShape> ;
    interop:registeredWith                  IRI // shex:reference <#ApplicationShape> ;
    interop:registeredAt                    xsd:dateTime ;
    interop:updatedAt                       xsd:dateTime ;
  )
}

<#AgentRegistryShape> {
  a [ interop:AgentRegistry ] ;
  interop:hasSocialAgentRegistration        IRI* // shex:reference <#SocialAgentRegistrationShape> ;
  interop:hasApplicationRegistration        IRI* // shex:reference <#ApplicationRegistrationShape>
}

<#SocialAgentRegistrationShape> {
  a [ interop:SocialAgentRegistration ] ;
  &<#CommonRegistrationProperties> ;
  interop:registeredAgent                   IRI  // shex:reference <#AgentShape> ;
  interop:hasAccessGrant                    IRI  // shex:reference <#AccessGrantShape> ;
  interop:reciprocalRegistration            IRI? // shex:reference <#SocialAgentShape> ;
  skos:prefLabel                            xsd:string ;
  skos:note                                 xsd:string?
}

<#SocialAgentInvitationShape> {
  a [ interop:SocialAgentInvitation ] ;
  &<#CommonRegistrationProperties
  interop:capabilityUrl                     IRI ;
  skos:prefLabel                            xsd:string ;
  skos:note                                 xsd:string?
}

<#ApplicationRegistrationShape> {
  a [ interop:ApplicationRegistration ] ;
  &<#CommonRegistrationProperties> ;
  interop:registeredAgent                   IRI  // shex:reference <#AgentShape> ;
  interop:hasAccessGrant                    IRI  // shex:reference <#AccessGrantShape>
}

<#DataRegistryShape> {
  a [ interop:DataRegistry ] ;
  interop:hasDataRegistration               IRI* // shex:reference <#DataRegistrationShape>
}

<#DataRegistrationShape> {
  a [ interop:DataRegistration ] ;
  &<#CommonRegistrationProperties> ;
  interop:registeredShapeTree               IRI  // shex:reference sts:ShapeTree;
}

<#ApplicationShape> {
  a [ interop:Application ] ;
  interop:applicationName                   xsd:string ;
  interop:applicationDescription            xsd:string ;
  interop:applicationAuthor                 IRI  // shex:reference <#AgentShape> ;
  interop:applicationThumbnail              IRI? ;
  interop:hasAccessNeedGroup                IRI* // shex:reference <#AccessNeedGroupShape> ;
  interop:hasAuthorizationCallbackEndpoint  IRI? ;
}

<#AccessNeedGroupShape> {
  a [ interop:AccessNeedGroup ] ;
  interop:hasAccessDescriptionSet             IRI*  // shex:reference <#AccessDescriptionSetShape> ;
  interop:accessNecessity                   [ interop:AccessRequired interop:AccessOptional ] ;
  interop:accessScenario                    [ interop:PersonalAccess interop:SharedAccess ]+ ;
  interop:authenticatesAs                   [ interop:SocialAgent interop:Application ] ;
  interop:hasAccessNeed                     IRI+  // shex:reference <#AccessNeedShape> ;
}

<#AccessNeedShape> {
  a [ interop:AccessNeed ] ;
  interop:registeredShapeTree               IRI  // shex:reference sts:ShapeTree ;
  interop:accessMode                        @<#AccessModes>+ ;
  interop:creatorAccessMode                 @<#AccessModes>* ;
  interop:accessNecessity                   [ interop:AccessRequired interop:AccessOptional ] ;
  interop:hasDataInstance                   IRI* ;
  interop:inheritsFromNeed                  IRI? // shex:reference <#AccessNeedShape> ;
}

<#AccessModes> [ acl:Read acl:Write acl:Append acl:Control acl:Create acl:Update acl:Delete ]

<#AccessDescriptionSetShape> {
  a [ interop:AccessDescriptionSet ] ;
  interop:usesLanguage                      xsd:language
}

<#AccessNeedGroupDescriptionShape> {
  a [ interop:AccessNeedGroupDescription ] ;
  interop:inAccessDescriptionSet              IRI  // shex:reference <#AccessDescriptionSetShape> ;
  interop:hasAccessNeedGroup                IRI  // shex:reference <#AccessNeedGroupShape> ;
  skos:prefLabel                            xsd:string ;
  skos:definition                           xsd:string
}

<#AccessNeedDescriptionShape> {
  a [ interop:AccessNeedDescription ] ;
  interop:inAccessDescriptionSet              IRI  // shex:reference <#AccessDescriptionSetShape> ;
  interop:hasAccessNeed                     IRI  // shex:reference <#AccessNeedShape> ;
  skos:prefLabel xsd:string
}

<#AccessRequestShape> {
  a [interop:AccessRequest] ;
  interop:fromSocialAgent                   IRI  // shex:reference <#SocialAgentShape> ;
  interop:toSocialAgent                     IRI  // shex:reference <#SocialAgentShape> ;
  interop:hasAccessNeedGroup                @<#AccessNeedGroupShape>+
}

<#AuthorizationRegistryShape> {
  a [ interop:AuthorizationRegistry ] ;
  interop:hasAccessAuthorization                   IRI* // shex:reference <#AccessAuthorizationShape>
}

<#AccessAuthorizationShape> {
  a [ interop:AccessAuthorization ] ;
  interop:grantedBy                         IRI  // shex:reference <#AgentShape> ;
  interop:grantedWith                       IRI? // shex:reference <#ApplicationShape> ;
  interop:grantedAt                         xsd:dateTime ;
  interop:grantee                           IRI  // shex:reference <#AgentShape> ;
  interop:hasAccessNeedGroup                IRI? // shex:reference <#AccessNeedGroupShape> ;
  interop:hasDataAuthorization                    IRI+ // shex:reference <#DataAuthorizationShape> ;
  interop:replaces                          IRI? // shex:reference <#AccessAuthorizationShape>
}

<#DataAuthorizationShape>
  <#DataAuthorizationAllShape> OR
  <#DataAuthorizationAllFromAgentShape> OR
  <#DataAuthorizationAllFromRegistryShape> OR
  <#DataAuthorizationSelectedFromRegistryShape> OR
  <#DataAuthorizationInheritedShape>

<#DataAuthorizationAllShape> {
  a [ interop:DataAuthorization ] ;
  $<#CommonDataAuthorizationProperties> (
    interop:grantee                         IRI  // shex:reference <#AgentShape> ;
    interop:registeredShapeTree             IRI  // shex:reference sts:ShapeTree ;
    interop:satisfiesAccessNeed             IRI? // shex:reference <#AccessNeedShape> ;
    interop:accessMode                      @<#AccessModes>+ ;
    interop:creatorAccessMode               @<#AccessModes>* ;
  ) ;
  interop:scopeOfAuthorization                    [ interop:All ]
}

<#DataAuthorizationAllFromAgentShape> {
  a [ interop:DataAuthorization ] ;
  &<#CommonDataAuthorizationProperties> ;
  interop:dataOwner                         IRI  // shex:reference <#SocialAgentShape> ;
  interop:scopeOfAuthorization                    [ interop:AllFromAgent ]
}

<#DataAuthorizationAllFromRegistryShape> {
  a [ interop:DataAuthorization ] ;
  &<#CommonDataAuthorizationProperties> ;
  interop:dataOwner                         IRI  // shex:reference <#SocialAgentShape> ;
  interop:scopeOfAuthorization                    [ interop:AllFromRegistry ] ;
  interop:hasDataRegistration               IRI  // shex:reference <#DataRegistrationShape>
}

<#DataAuthorizationSelectedFromRegistryShape> {
  a [ interop:DataAuthorization ] ;
  &<#CommonDataAuthorizationProperties> ;
  interop:dataOwner                         IRI  // shex:reference <#SocialAgentShape> ;
  interop:scopeOfAuthorization                    [ interop:SelectedFromRegistry ] ;
  interop:hasDataRegistration               IRI  // shex:reference <#DataRegistrationShape> ;
  interop:hasDataInstance                   IRI+
}

<#DataAuthorizationInheritedShape> {
  a [ interop:DataAuthorization ] ;
  &<#CommonDataAuthorizationProperties> ;
  interop:dataOwner                         IRI  // shex:reference <#SocialAgentShape> ;
  interop:scopeOfAuthorization                    [ interop:Inherited ] ;
  interop:hasDataRegistration               IRI? // shex:reference <#DataRegistrationShape> ;
  interop:inheritsFromAuthorization               IRI  // shex:reference <#DataAuthorizationShape>
}

<#AccessGrantShape> {
  a [ interop:AccessGrant ] ;
  interop:grantedBy                         IRI  // shex:reference <#AgentShape> ;
  interop:grantedWith                       IRI? // shex:reference <#ApplicationShape> ;
  interop:grantedAt                         xsd:dateTime ;
  interop:grantee                           IRI  // shex:reference <#AgentShape> ;
  interop:hasAccessNeedGroup                IRI  // shex:reference <#AccessNeedGroupShape> ;
  interop:hasDataGrant                      IRI+ // shex:reference <#DataGrant> ;
}

<#DataGrantShape>
  <#DataGrantAllFromRegistryShape> OR
  <#DataGrantSelectedFromRegistryShape> OR
  <#DataGrantInheritedShape>

<#DataGrantAllFromRegistryShape> {
  ( a [ interop:DataGrant ]
    |
    a [ interop:DelegatedDataGrant ] ;
    interop:delegationOfGrant               IRI  // shex:reference <#DataGrantShape> ) ;
  &<#CommonDataAuthorizationProperties> ;
  interop:dataOwner                         IRI  // shex:reference <#AgentShape> ;
  interop:hasDataRegistration               IRI  // shex:reference <#DataRegistrationShape> ;
  interop:scopeOfGrant                      [ interop:AllFromRegistry ]
}

<#DataGrantSelectedFromRegistryShape> {
  ( a [ interop:DataGrant ]
    |
    a [ interop:DelegatedDataGrant ] ;
    interop:delegationOfGrant               IRI  // shex:reference <#DataGrantShape> ) ;
  &<#CommonDataAuthorizationProperties> ;
  interop:dataOwner                         IRI  // shex:reference <#AgentShape> ;
  interop:hasDataRegistration               IRI  // shex:reference <#DataRegistrationShape> ;
  interop:scopeOfGrant                      [ interop:SelectedFromRegistry ] ;
  interop:hasDataInstance                   IRI+
}

<#DataGrantInheritedShape> {
  ( a [ interop:DataGrant ]
    |
    a [ interop:DelegatedDataGrant ] ;
    interop:delegationOfGrant               IRI  // shex:reference <#DataGrantShape> ) ;
  &<#CommonDataAuthorizationProperties> ;
  interop:dataOwner                         IRI  // shex:reference <#AgentShape> ;
  interop:hasDataRegistration               IRI  // shex:reference <#DataRegistrationShape> ;
  interop:scopeOfGrant                      [ interop:Inherited ] ;
  interop:inheritsFromGrant                 IRI  // shex:reference <#DataGrantShape> ;
}

<#AccessReceiptShape> {
  a [interop:AccessReceipt] ;
  interop:providedAt                        xsd:dateTime ;
  interop:grantedBy                         IRI  // shex:reference <#SocialAgentShape>
}
