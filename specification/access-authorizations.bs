Access Authorizations {#authorizations}
=====================

[=Access Authorizations=] record a [=Social Agent's=] decision to grant access to
some portion of the data in their control to another [=Social Agent=] or
[=Application=]. [=Access Authorizations=] are not shared with a grantee.

[=Access Grants=] are generated from [=Access Authorizations=]. They are shared
with a given [=Agent=] to communicate the scope of access that has been
granted to them.

## Access Authorization ## {#access-authorization}

An <dfn>Access Authorization</dfn> records the decision of a [=Social Agent=]
to grant access to some portion of data in their control to
another [=Agent=].

[=Access Authorizations=] should not be shared with the [=Agent=] that
has been granted access. [=Access Grants=] are generated from
[=Access Authorizations=], and are appropriate to share with the grantee.

[=Access Authorizations=] are recorded in a [=Social Agent's=] [=Authorization Registry=].

[=Access Authorizations=] are immutable. If an [=Access Authorization=] for an
[=Agent=] needs to change, it should be replaced.

If an [=Access Authorization=] is replaced, history may be retained by unlinking the
previous [=Access Authorization=] from the [=Authorization Registry=], and linking
to it from the replacement [=Access Authorization=] via `interop:replaces`.

[Class Definition](interop.ttl#AccessAuthorization) -
[Shape Definition](interop.shex#AccessAuthorizationShape) -
[Shape Tree Definition](interop.tree#AccessAuthorizationTree)

<table class="classinfo data" align="left" id="classAccessAuthorization">
  <colgroup></colgroup>
  <colgroup></colgroup>
  <colgroup></colgroup>
  <thead>
    <tr>
      <th>Property</th>
      <th>Range</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>grantedBy</td>
      <td>[SocialAgent](#classSocialAgent)</td>
      <td>[=Social Agent=] that granted the [=Access Authorization=]</td>
    </tr>
    <tr>
      <td>grantedWith</td>
      <td>[Application](#classApplication)</td>
      <td>[=Application=] used to grant the [=Access Authorization=]</td>
    </tr>
    <tr>
      <td>grantedAt</td>
      <td>xsd:dateTime</td>
      <td>Date and time the [=Access Authorization=] was granted</td>
    </tr>
    <tr>
      <td>grantee</td>
      <td>[Agent](#classAgent)</td>
      <td>The [=Social Agent=] or [=Application=] that has received
      authorization</td>
    </tr>
    <tr>
      <td>hasAccessNeedGroup</td>
      <td>[AccessNeedGroup](#classAccessNeedGroup)</td>
      <td>An [=Access Need Group=] used to communicate the
      [=Access Needs=] that the [=Access Authorization=] is
      satisfying</td>
    </tr>
    <tr>
      <td>hasDataAuthorization</td>
      <td>[DataAuthorization](#classDataAuthorization)</td>
      <td>Authorization for a specific type of data</td>
    </tr>
    <tr>
      <td>replaces</td>
      <td>[AccessAuthorization](#classAccessAuthorization)</td>
      <td>Previous [=Access Authorization=] replaced by current instance</td>
    </tr>
  </tbody>
</table>

<figure>
  <figcaption>Alice's [=Access Authorization=] for Projectron at
    https://alice.example/authorization/e2765d6c -
    <a href="snippets/alice.example/e2765d6c.ttl">View</a>
  </figcaption>
  <pre class=include-code>
  path: snippets/alice.example/e2765d6c.ttl
  highlight: turtle
  show: 10-25
  </pre>
</figure>

<figure>
  <figcaption>Alice's [=Access Authorization=] for Bob at
    https://alice.example/authorization/4460dce3 -
    <a href="snippets/alice.example/4460dce3.ttl">View</a>
    </figcaption>
  <pre class=include-code>
  path: snippets/alice.example/4460dce3.ttl
  highlight: turtle
  show: 12-25
  </pre>
</figure>

Issue(177):

Issue(221):

Issue(256):

## Data Authorization ## {#data-authorization}

A <dfn>Data Authorization</dfn> records the decision of a [=Social Agent=]
to grant access to a specific type of data in their control, identified
by a [=Shape Tree=]. They are always associated with a single
[=Access Authorization=].

[=Data Authorizations=] should not be shared with the [=Agent=] that has
been granted access. [=Data Grants=] are generated from [=Data Authorizations=],
and are appropriate to share with the grantee.

[=Data Authorizations=] are immutable. If a [=Data Authorization=]
needs to change, it should be replaced.

[Class Definition](interop.ttl#DataAuthorization) -
[Shape Definition](interop.shex#DataAuthorizationShape) -
[Shape Tree Definition](interop.tree#DataAuthorizationTree)

<table class="classinfo data" align="left" id="classDataAuthorization">
  <colgroup></colgroup>
  <colgroup></colgroup>
  <colgroup></colgroup>
  <thead>
    <tr>
      <th>Property</th>
      <th>Range</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>dataOwner</td>
      <td>[SocialAgent](#classSocialAgent)</td>
      <td>[=Social Agent=] that owns the data being authorized</td>
    </tr>
    <tr>
      <td>grantee</td>
      <td>[Agent](#classAgent)</td>
      <td>The [=Social Agent=] or [=Application=] that has received
      authorization</td>
    </tr>
    <tr>
      <td>registeredShapeTree</td>
      <td><a href="https://www.w3.org/ns/shapetrees#ShapeTree" class="vocab">st:ShapeTree</a></td>
      <td>[=Shape Tree=] representing the type of data being authorized</td>
    </tr>
    <tr>
      <td>accessMode</td>
      <td>`acl:Read, acl:Write, acl:Update, acl:Create, acl:Delete, acl:Append`</td>
      <td>Modes of access granted to the authorized data</td>
    </tr>
    <tr>
      <td>creatorAccessMode</td>
      <td>`acl:Read, acl:Write, acl:Update, acl:Create, acl:Delete, acl:Append`</td>
      <td>Additional access mode assigned to the creator of a
        data instance. Adds to the set of modes linked via
        `interop:accessMode`. Only valid when `accessMode` includes
         `acl:Create`, `acl:Write`, or `acl:Append`</td>
    </tr>
    <tr>
      <td>scopeOfAuthorization</td>
      <td>interop:All, interop:AllFromAgent, interop:AllFromRegistry,
      interop:SelectedFromRegistry, interop:Inherited</td>
      <td>Identifies the [=access scope=] of the [=Data Authorization=]</td>
    </tr>
    <tr>
      <td>hasDataRegistration</td>
      <td>A [=Data Registration=] for `registeredShapeTree`</td>
      <td>Links to a [=Data Registration=] of registeredShapeTree in a
      [=Data Registry=] that is a subject of the current
      [=Data Authorization=].</td>
    </tr>
    <tr>
      <td>hasDataInstance</td>
      <td>[=Data instance=] of `registeredShapeTree`</td>
      <td>Links to a [=Data Instance=] of registeredShapeTree in a
      [=Data Registry=].</td>
    </tr>
    <tr>
      <td>satisfiesAccessNeed</td>
      <td>[AccessNeed](#classAccessNeed)</td>
      <td>Links to the [=Access Need=] satisfied by the [=Data Authorization=]</td>
    </tr>
    <tr>
      <td>inheritsFromAuthorization</td>
      <td>[DataAuthorization](#classDataAuthorization)</td>
      <td>Links to a parent [=Data Authorization=] whose registeredShapeTree
      references the shape tree associated with the current
      [=Data Authorization=].</td>
    </tr>
  </tbody>
</table>

<figure>
  <figcaption>Alice's [=Data Authorization=] for Projectron to access Projects
    at https://alice.example/authorization/54a1b6a0 -
    <a href="snippets/alice.example/54a1b6a0.ttl">View</a>
    </figcaption>
  <pre class=include-code>
  path: snippets/alice.example/54a1b6a0.ttl
  highlight: turtle
  show: 12-20
  </pre>
</figure>

<figure>
  <figcaption>Alice's [=Data Authorization=] for Projectron to access Tasks
    at https://alice.example/authorization/0e4cb692 -
    <a href="snippets/alice.example/0e4cb692.ttl">View</a>
    </figcaption>
  <pre class=include-code>
  path: snippets/alice.example/0e4cb692.ttl
  highlight: turtle
  show: 12-22
  </pre>
</figure>

## Access Grant ## {#access-grant}

An <dfn>Access Grant</dfn> provides an [=Agent=] with a detailed
description of access that has been granted to them. [=Access Grants=]
are generated from [=Access Authorizations=], and are stored in the
[=Agent Registry=] of the [=Data Owner=].

Each [=Access Grant=] has one or more [=Data Grants=], each of which
represents access granted to a specific type of data.

[=Access Grants=] are immutable. If an [=Access Grant=]
needs to change, it must be replaced.

[Class Definition](interop.ttl#AccessGrant) -
[Shape Definition](interop.shex#AccessGrantShape) -
[Shape Tree Definition](interop.tree#AccessGrantTree)

<table class="classinfo data" align="left" id="classAccessGrant">
  <colgroup></colgroup>
  <colgroup></colgroup>
  <colgroup></colgroup>
  <thead>
    <tr>
      <th>Property</th>
      <th>Range</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>grantedBy</td>
      <td>[SocialAgent](#classSocialAgent)</td>
      <td>[=Social Agent=] that granted the [=Access Grant=]</td>
    </tr>
    <tr>
      <td>grantedAt</td>
      <td>xsd:dateTime</td>
      <td>Date and time the [=Access Grant=] was granted</td>
    </tr>
    <tr>
      <td>grantee</td>
      <td>[Agent](#classAgent)</td>
      <td>Links to the [=Social Agent=] or [=Application=] that was granted access.</td>
    </tr>
    <tr>
      <td>hasAccessNeedGroup</td>
      <td>[AccessNeedGroup](#classAccessNeedGroup)</td>
      <td>Links to an [=Access Need Group=] associated with the Access Grant.</td>
    </tr>
    <tr>
      <td>hasDataGrant</td>
      <td>[DataGrant](#classDataGrant)</td>
      <td>Links to a [=Data Grant=] associated with the Access Grant.</td>
    </tr>
  </tbody>
</table>

<figure>
  <figcaption>Alice's [=Access Grant=] to Projectron, stored in the
  [=Agent Registration=] for Projectron in her [=Agent Registry=] at
  https://alice.pod.example/agents/2f2f3628/27eae14b -
  <a href="snippets/alice.example/27eae14b.ttl">View</a>
  </figcaption>
  <pre class=include-code>
  path: snippets/alice.example/27eae14b.ttl
  highlight: turtle
  show: 10-21
  </pre>
</figure>

## Data Grant ## {#data-grant}

A <dfn>Data Grant</dfn> provides an [=Agent=] with a detailed description
of access that has been granted to them for a specific type of data,
identified by a [=Shape Tree=]. Each [=Data Grant=] is associated with
a single [=Access Grant=].

A [=Data Grant=] may inherit from another [=Data Grant=], when the
[=shape tree=] associated with the "parent" [=Data Grant=] has one or
more [=Shape Tree References=].

Each [=Data Grant=] has an assigned scope (`interop:scopeOfGrant`), which
determines how permissions are assigned.

When creating a [=Data Grant=], there should be an [=Access Need=] linked
via `interop:satisfiesAccessNeed` with the same `interop:registeredShapeTree`.

When a [=Social Agent=] grants another [=Agent=] access to data that was shared
with them, a [=Delegated Data Grant=] is used instead.

[=Data Grants=] are immutable. If a [=Data Grant=]
needs to change, it should be replaced.

[Class Definition](interop.ttl#DataGrant) -
[Shape Definition](interop.shex#DataGrantShape) -
[Shape Tree Definition](interop.tree#DataGrantTree)

<table class="classinfo data" align="left" id="classDataGrant">
  <colgroup></colgroup>
  <colgroup></colgroup>
  <colgroup></colgroup>
  <thead>
    <tr>
      <th>Property</th>
      <th>Range</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>dataOwner</td>
      <td>[SocialAgent](#classSocialAgent)</td>
      <td>[=Social Agent=] that owns the data being granted</td>
    </tr>
    <tr>
      <td>grantee</td>
      <td>[Agent](#classAgent)</td>
      <td>The [=Social Agent=] or [=Application=] that was granted access.</td>
    </tr>
    <tr>
      <td>registeredShapeTree</td>
      <td>st:ShapeTree</td>
      <td>[=Data Registration=] for the [=shape tree=] that access
      will be granted to</td>
    </tr>
    <tr>
      <td>hasDataRegistration</td>
      <td>[DataRegistration](#classDataRegistration)</td>
      <td>[=Data Registration=] for `registeredShapeTree` that the
      [=Data Grant=] applies to</td>
    </tr>
    <tr>
      <td>accessMode</td>
      <td>`acl:Read, acl:Write, acl:Update, acl:Create, acl:Delete, acl:Append`</td>
      <td>Modes of access granted to the target data at hasDataRegistration</td>
    </tr>
    <tr>
      <td>creatorAccessMode</td>
      <td>`acl:Read, acl:Write, acl:Update, acl:Create, acl:Delete, acl:Append`</td>
      <td>Additional access mode assigned to the creator of a
        data instance. Adds to the set of modes linked via
        `interop:accessMode`. Only valid when `accessMode` includes
         `acl:Create`, `acl:Write`, or `acl:Append`</td>
    </tr>
    <tr>
      <td>scopeOfGrant</td>
      <td>interop:All, interop:AllFromAgent, interop:AllFromRegistry,
      interop:SelectedFromRegistry, interop:Inherited</td>
      <td>Identifies the [=access scope=] of the [=Data Grant=]</td>
    </tr>
    <tr>
      <td>satisfiesAccessNeed</td>
      <td>[AccessNeed](#classAccessNeed)</td>
      <td>Links to the [=Access Need=] satisfied by the [=Data Grant=]</td>
    </tr>
    <tr>
      <td>hasDataInstance</td>
      <td>Instance of registeredShapeTree</td>
      <td>Links to a [=Data Instance=] of registeredShapeTree.</td>
    </tr>
    <tr>
      <td>inheritsFromGrant</td>
      <td>[DataGrant](#classDataGrant)</td>
      <td>Links to another [=Data Grant=] whose registeredShapeTree
      references the shape tree associated with the current
      [=Data Grant=].</td>
    </tr>
  </tbody>
</table>

<figure>
  <figcaption>Alice's [=Data Grant=] for Projectron to access Projects at
  https://alice.example/agents/2f2f3628/40d038ea -
  <a href="snippets/alice.example/40d038ea.ttl">View</a>
  </figcaption>
  <pre class=include-code>
  path: snippets/alice.example/40d038ea.ttl
  highlight: turtle
  show: 12-25
  </pre>
</figure>

<figure>
  <figcaption>Alice's [=Data Grant=] for Projectron to access Tasks at
  https://alice.example/agents/2f2f3628/0945218b -
  <a href="snippets/alice.example/0945218b.ttl">View</a>
  </figcaption>
  <pre class=include-code>
  path: snippets/alice.example/0945218b.ttl
  highlight: turtle
  show: 13-25
  </pre>
</figure>

Issue(223):

## Delegated Data Grant ## {#delegated-data-grant}

A <dfn>Delegated Data Grant</dfn> is a sub-class of [=Data Grant=]
used when a grantee re-shares or "delegates" access they've
received to another [=Agent=]. The most common use case
is when Alice shares access with Bob, and Bob delegates
that access to his project management application.

[=Delegated Data Grants=] are immutable. If a [=Delegated Data Grant=]
needs to change, it should be replaced.

[Class Definition](interop.ttl#DelegatedDataGrant) -
[Shape Definition](interop.shex#DelegatedDataGrantShape) -
[Shape Tree Definition](interop.tree#DelegatedDataGrantTree)

<table class="classinfo data" align="left" id="classDelegatedDataGrant">
  <colgroup></colgroup>
  <colgroup></colgroup>
  <colgroup></colgroup>
  <thead>
    <tr>
      <th>Property</th>
      <th>Range</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>delegationOfGrant</td>
      <td>[DataGrant](#classDataGrant)</td>
      <td>[=Data Grant=] that is being delegated</td>
    </tr>
  </tbody>
</table>

<figure>
  <figcaption>Alice's [=Delegated Data Grant=] for Projectron to access Projects
  that Bob shared with her at https://alice.example/agents/2f2f3628/fe818190 -
  <a href="snippets/alice.example/fe818190.ttl">View</a>
  </figcaption>
  <pre class=include-code>
  path: snippets/alice.example/fe818190.ttl
  highlight: turtle
  show: 13-26
  </pre>
</figure>

<figure>
  <figcaption>Alice's [=Delegated Data Grant=] for Projectron to access Tasks
  that Bob shared with her at https://alice.example/agents/2f2f3628/017d6a07 -
  <a href="snippets/alice.example/017d6a07.ttl">View</a>
  </figcaption>
  <pre class=include-code>
  path: snippets/alice.example/017d6a07.ttl
  highlight: turtle
  show: 13-26
  </pre>
</figure>

Issue(222):

## Data Access Scopes ## {#access-scopes}

Each [=Data Authorization=] applies to a specific type of data,
identified by a [=shape tree=]. The amount of access authorized for data
of that type is specified by the
<dfn>Access Scope</dfn>, via `interop:scopeOfAuthorization`.

[=Data Grants=] are generated from a given [=Data Authorization=] based on
[=access scope=] and other supporting criteria detailed below.

Each [=Data Grant=] corresponds to a specific [=Data Registration=]
in a [=Data Registry=], and has an associated [=access scope=]
and [=access modes=].

Issue: This specification uses some access modes in the `acl:` namespace that
have not been adopted to demonstrate the most secure and accurate
expression of a [=Social Agent's=] authorization.
[Discussions are underway](https://github.com/solid/authorization-panel/issues/253)
to add these modes.

Issue: [[!WAC]] does not have any mechanism to extend or modify
inherited permissions.

<table class="data tree" align="left">
  <col>
  <col>
  <thead>
    <tr>
      <th>Scope</th>
      <th>Authorization</th>
      <th>Grant</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><a href="#scope-all"><b>`All`</b></a></td>
      <td>Yes</td>
      <td><b>No</b></td>
      <td>All of the owner's data of a specified type, and all data shared with the owner of that type, across the owner's registries</td>
    </tr>
    <tr>
      <td><a href="#scope-fromagent"><b>`AllFromAgent`</b></a></td>
      <td>Yes</td>
      <td><b>No</b></td>
      <td>All data of a given type shared by a specified [=Social Agent=] with the owner, across that [=Social Agent's=] registries</td>
    </tr>
    <tr>
      <td><a href="#scope-fromregistry"><b>`AllFromRegistry`</b></a></td>
      <td>Yes</td>
      <td>Yes</td>
      <td>All of the data owner's data of a specified type in a specified [=Data Registry=]</td>
    </tr>
    <tr>
      <td><a href="#scope-selected"><b>`SelectedFromRegistry`</b></a></td>
      <td>Yes</td>
      <td>Yes</td>
      <td>Only specified [=Data Instances=] of the data owner's of a given type in a specified [=Data Registry=]</td>
    </tr>
    <tr>
      <td><a href="#scope-inherited"><b>`Inherited`</b></a></td>
      <td>Yes</td>
      <td>Yes</td>
      <td>Only [=Data Instances=] of the data owner's that are associated with [=Data Instances=] allowed by another authorization or grant</td>
    </tr>
  </tbody>
</table>

### <code>All</code> ### {#scope-all}

The `interop:All` [=access scope=] includes all data of a specified type
belonging to a given data owner, and all data of that same type shared with the data
owner, across all of the data owner’s registries.

<b>Shapes:</b> [DataAuthorizationAllShape](interop.shex#DataAuthorizationAllShape)

The follow example illustrates *Alice's* authorization to give *Projectron* access to
data of type `pm-shapetrees:ProjectTree` with a scope of `interop:All`. Since
Alice has two [=Data Registries=] and Bob has shared projects with her, several
[=Data Grants=] will be generated from this [=Data Authorization=] and shared
with Projectron.

Note: `interop:All` is only valid for a [=Data Authorization=].
Generated [=Data Grants=] use the more specific `interop:AllFromRegistry`
for each unique [=Data Registry=], including Bob's.

<figure>
  <figcaption>Alice's [=Data Authorization=] for Projectron to access Projects
    at https://alice.example/authorization/54a1b6a0 -
    <a href="snippets/alice.example/54a1b6a0.ttl">View</a>
    </figcaption>
  <pre class=include-code>
  path: snippets/alice.example/54a1b6a0.ttl
  highlight: turtle
  show: 12-25
  line-highlight: 19
  </pre>
</figure>

<figure>
  <figcaption>Alice's [=Data Grant=] for Projectron to access Projects in her
  Work [=Data Registry=] at
  https://alice.example/agents/2f2f3628/40d038ea -
  <a href="snippets/alice.example/40d038ea.ttl">View</a>
  </figcaption>
  <pre class=include-code>
  path: snippets/alice.example/40d038ea.ttl
  highlight: turtle
  show: 12-25
  line-highlight: 21
  </pre>
</figure>

<figure>
  <figcaption>Alice's [=Data Grant=] for Projectron to access her Projects in
  her Personal [=Data Registry=] at
  https://alice.example/agents/2f2f3628/a0623c8f -
  <a href="snippets/alice.example/a0623c8f.ttl">View</a>
  </figcaption>
  <pre class=include-code>
  path: snippets/alice.example/a0623c8f.ttl
  highlight: turtle
  show: 12-25
  line-highlight: 21
  </pre>
</figure>

<figure>
  <figcaption>Alice's [=Delegated Data Grant=] for Projectron to access Projects
  that Bob shared with her at https://alice.example/agents/2f2f3628/fe818190 -
  <a href="snippets/alice.example/fe818190.ttl">View</a>
  </figcaption>
  <pre class=include-code>
  path: snippets/alice.example/fe818190.ttl
  highlight: turtle
  show: 13-26
  line-highlight: 22
  </pre>
</figure>

### <code>AllFromAgent</code> ### {#scope-fromagent}

The `interop:AllFromAgent` [=access scope=] includes all data of a given type
owned and shared by a specified [=Social Agent=], across all of their
[=Data Registries=]. Essentially, Alice can use this scope to delegate
any access that she has been given to another [=Social Agent's=]
data (e.g. Bob), to another [=Agent=] of her choosing.

The [=Social Agent=] whose access is being shared is identified via
`interop:dataOwner`.

<b>Shapes:</b> [DataAuthorizationAllFromAgentShape](interop.shex#DataAuthorizationAllFromAgentShape)

The following example illustrates *Alice's* authorization to give Performchart access to
data of type `pm-shapetrees:ProjectTree` with a scope of `interop:AllFromAgent`
and an `interop:dataOwner` of *Bob*.

Note: While Bob has granted Alice the ability to manipulate his project data,
Alice grants Performchart a narrower scope of read-only access.

<figure>
  <figcaption>Alice's [=Data Authorization=] for Performchart to access Projects
    that Bob shared with her at https://alice.example/authorization/0e36ba8f -
    <a href="snippets/alice.example/0e36ba8f.ttl">View</a>
    </figcaption>
  <pre class=include-code>
  path: snippets/alice.example/0e36ba8f.ttl
  highlight: turtle
  show: 14-25
  line-highlight: 20
  </pre>
</figure>

Bob has shared data of this type with Alice from
only one [=Data Registry=], which he shared with her previously
through her [=Agent Registration=] in his [=Agent Registry=].

<figure>
  <figcaption>Bob's [=Data Grant=] for Alice to access Projects
  at https://bob.example/agents/255aa181/b2b6a645 -
  <a href="snippets/bob.example/b2b6a645.ttl">View</a>
  </figcaption>
  <pre class=include-code>
  path: snippets/bob.example/b2b6a645.ttl
  highlight: turtle
  show: 13-26
  line-highlight: 22
  </pre>
</figure>

Alice generates one [=Delegated Data Grant=] for Performchart to access
the Project data that Bob shared with her, which she stores in
the [=Agent Registration=] for Performchart in her [=Agent Registry=].
It is marked as a delegation of Bob's [=Data Grant=]
via `interop:delegationOfGrant`.

<figure>
  <figcaption>Alice's [=Delegated Data Grant=] for Performchart to access Projects
  that Bob shared with her at https://alice.example/agents/c2328cdd/efc426c9 -
  <a href="snippets/alice.example/efc426c9.ttl">View</a>
  </figcaption>
  <pre class=include-code>
  path: snippets/alice.example/efc426c9.ttl
  highlight: turtle
  show: 13-26
  line-highlight: 21
  </pre>
</figure>

### <code>AllFromRegistry</code> ### {#scope-fromregistry}

The `interop:AllFromRegistry` [=access scope=] includes all
data of a specified type in a specified [=Data Registry=] of a given data owner.
Since a [=Data Registry=] can only have one [=Data Registration=] per [=shape tree=],
this scope provide access to all [=Data Instances=] in the [=Data Registration=]
of the [=shape tree=] specified via `interop:registeredShapeTree`.

<b>Shapes:</b> [DataAuthorizationAllFromRegistryShape](interop.shex#DataAuthorizationAllFromRegistryShape) -
[DataGrantAllFromRegistryShape](interop.shex#DataGrantAllFromRegistryShape)

The following example illustrates *Bob's* authorization to give Alice access to
all data of type `pm-shapetrees:ProjectTree` in the [=Data Registry=] he uses
for his professional work.

<figure>
  <figcaption>Bob's [=Data Authorization=] at https://bob.example/authorization/e4b1b154
  for Alice to access his Project data -
  <a href="snippets/bob.example/e4b1b154.ttl">View</a>
  </figcaption>
  <pre class=include-code>
  path: snippets/bob.example/e4b1b154.ttl
  highlight: turtle
  show: 13-25
  line-highlight: 20
  </pre>
</figure>

The following [=Data Grant=] is generated for Alice based on the above
[=Data Authorization=], and stored in the [=Agent Registration=] for Alice in
Bob's [=Agent Registry=].

<figure>
  <figcaption>Bob's [=Data Grant=]
  at https://bob.example/agents/255aa181/b2b6a645
  for Alice to access his work Project data -
  <a href="snippets/bob.example/b2b6a645.ttl">View</a>
  </figcaption>
  <pre class=include-code>
  path: snippets/bob.example/b2b6a645.ttl
  highlight: turtle
  show: 13-26
  line-highlight: 22
  </pre>
</figure>

When a [=Data Grant=] is assigned the `interop:AllFromRegistry` scope, the
`interop:grantee` is authorized to access all [=Data Instances=]
in the [=Data Registration=] linked via `interop:hasDataRegistration`,
limited by the [=access modes=] linked via `interop:accessMode`.

In the above example, Bob would be giving Alice the following access to
`pm-shapetrees:ProjectTree` [=Data Instances=] (Projects) in the `bob-work-data:08a99a10`
[=Data Registration=]:

- Read the Data Registration
- List all Projects
- Read all Projects
- Create a new Project
- Read a Project she creates
- Delete a Project she creates
- Create resources in a Project she creates
- Modify existing resources in a Project she creates

<figure>
  <figcaption>Interpreting [=access modes=] for a [=Data Registration=] with
  AllFromRegistry scope</figcaption>
  <table class="data tree" align="left">
    <col>
    <col>
    <thead>
      <tr>
        <th>Mode</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>`acl:Create`</td>
        <td>Create new [=Data Instances=]. [=Access modes=] assigned to
        the creator on the created [=Data Instance=] should be a union of
        `interop:accessMode` and `interop:createAccessMode` modes.
        <b>acl:Create is not currently supported.
        Substitute with acl:Write or acl:Append, but may exceed intended scope
        of access.</b></td>
      </tr>
      <tr>
        <td>`acl:Read`</td>
        <td>Read [=Data Registration=]. List and read all [=Data Instances=]</td>
      </tr>
      <tr>
        <td>`acl:Update`</td>
        <td>Modify [=Data Instances=]. Modification of [=Data Registration=] graph
        not permitted. <b>`acl:Update` is not currently supported. Substitute with
        `acl:Write` or `acl:Append`, but may exceed intended scope of access.</b></td>
      </tr>
      <tr>
        <td>`acl:Delete`</td>
        <td>Delete [=Data Instances=]. Deletion of [=Data Registration=] not permitted.
        <b>`acl:Delete` is not currently supported. Substitute with `acl:Write`, but
        may exceed intended scope of access.</b></td>
      </tr>
    </tbody>
  </table>
</figure>

### <code>SelectedFromRegistry</code> ### {#scope-selected}

The `interop:SelectedFromRegistry` [=access scope=] includes only
specific [=Data Instances=] of the [=shape tree=] specified via
`interop:registeredShapeTree` in the [=Data Registry=] of a given
data owner.

<b>Shapes:</b> [DataAuthorizationSelectedFromRegistryShape](interop.shex#DataAuthorizationSelectedFromRegistryShape) -
[DataGrantSelectedFromRegistryShape](interop.shex#DataGrantSelectedFromRegistryShape)

The following example illustrates *Jose's* authorization for Alice to access
two specific [=Data Instances=] of `pm-shapetrees:ProjectTree` in the
[=Data Registry=] he uses for his professional work.

<figure>
  <figcaption>Jose's [=Data Authorization=] at https://jose.example/authorization/69095550
  for Alice to access his Project data -
  <a href="snippets/jose.example/69095550.ttl">View</a>
  </figcaption>
  <pre class=include-code>
  path: snippets/jose.example/69095550.ttl
  highlight: turtle
  show: 13-27
  line-highlight: 20
  </pre>
</figure>

The following [=Data Grant=] is generated for Alice based on the above
[=Data Authorization=], and stored in the [=Agent Registration=] for Alice in
Jose's [=Agent Registry=].

<figure>
  <figcaption>Jose's [=Data Grant=]
  at https://jose.example/agents/efba320e/2aa21a8c
  to share specific work projects with Alice -
  <a href="snippets/jose.example/2aa21a8c.ttl">View</a>
  </figcaption>
  <pre class=include-code>
  path: snippets/jose.example/2aa21a8c.ttl
  highlight: turtle
  show: 14-28
  line-highlight: 23
  </pre>
</figure>

When a [=Data Grant=] is assigned the `interop:SelectedFromRegistry` scope, the
`interop:grantee` is authorized to access only the specific
[=Data Instances=] linked via `interop:hasDataInstance` in the [=Data Registration=]
linked via `interop:hasDataRegistration`,
limited by the [=access modes=] linked via `interop:accessMode`.

<figure>
  <figcaption>Valid [=access modes=] for a [=Data Instance=]</figcaption>
  <table class="data tree" align="left">
    <col>
    <col>
    <thead>
      <tr>
        <th>Mode</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>`acl:Create`</td>
        <td>Create new resources within the [=Data Instances=] where applicable.
        [=Access modes=] assigned to
        the creator on a created resource should be a union of
        `interop:accessMode` and `interop:createAccessMode` modes.
        <b>acl:Create is not currently supported.
        Substitute with acl:Write or acl:Append, but may exceed intended scope
        of access.</b></td>
      </tr>
      <tr>
        <td>`acl:Read`</td>
        <td>Read [=Data Instance=] and any contained resources where applicable.</td>
      </tr>
      <tr>
        <td>`acl:Update`</td>
        <td>Modify [=Data Instance=] and any contained resources where applicable.
        <b>`acl:Update` is not currently supported. Substitute with `acl:Write` or
        `acl:Append`, but may exceed intended scope of access.</b></td>
      </tr>
      <tr>
        <td>`acl:Append`</td>
        <td>Add new data to resources in the [=Data Instance=], without changing any
        existing data.</td>
      </tr>
      <tr>
        <td>`acl:Delete`</td>
        <td>Delete [=Data Instance=] or any contained resources where applicable.
        <b>`acl:Delete` is not currently supported. Substitute with `acl:Write`, but
        may exceed intended scope of access.</b></td>
      </tr>
    </tbody>
  </table>
</figure>

Issue(186):

### <code>Inherited</code> ### {#scope-inherited}

The `interop:Inherited` [=access scope=] is unique in that it depends
on the existence of another [=Data Authorization=] with a scope of
`interop:All`, `interop:AllFromAgent`, `interop:AllFromRegistry`, or
`interop:SelectedFromRegistry`.

When a [=Data Authorization=] exists with
one of those scopes, and its `interop:registeredShapeTree` specifies
one or more virtual hierarchies via `st:references`, a corresponding
[=Data Authorization=] with a scope of `interop:Inherited` can be created
for each distinct reference.

<b>Shapes:</b> [DataAuthorizationInheritedShape](interop.shex#DataAuthorizationInheritedShape) -
[DataGrantInheritedShape](interop.shex#DataGrantInheritedShape)

<figure>
  <figcaption>Alice's [=Data Authorization=] for Projectron to access Projects
    at https://alice.example/authorization/54a1b6a0 -
    <a href="snippets/alice.example/54a1b6a0.ttl">View</a>
    </figcaption>
  <pre class=include-code>
  path: snippets/alice.example/54a1b6a0.ttl
  highlight: turtle
  show: 12-22
  line-highlight: 19
  </pre>
</figure>

The [=shape tree=] `pm-shapetrees:ProjectTree` specifies one virtual hierarchy
via `st:references`, indicating that a Project [=Data Instance=] virtually
includes Task instances of `pm-shapetrees:TaskTree` through the
predicate `pm:hasTask`.

<figure>
  <figcaption>
  ProjectTree definition at https://data.example/shapetrees/pm-shapetrees.tree -
  <a href="snippets/data.example/pm-shapetrees.tree">View Definition</a>
  </figcaption>
  <pre class=include-code>
  path: snippets/data.example/pm-shapetrees.tree
  highlight: turtle
  show: 10-17
  </pre>
</figure>

Consequently, a [=Data Authorization=] with `interop:Inherited` scope can be created
for `pm-shapetrees:TaskTree`.

<figure>
  <figcaption>Alice's [=Data Authorization=] for Projectron to access Tasks
    at https://alice.example/authorization/0e4cb692 -
    <a href="snippets/alice.example/0e4cb692.ttl">View</a>
    </figcaption>
  <pre class=include-code>
  path: snippets/alice.example/0e4cb692.ttl
  highlight: turtle
  show: 12-25
  line-highlight: 19
  </pre>
</figure>

[=Data Grants=] for Projects and their associated Tasks can then be generated
for Projectron based on the above [=Data Authorizations=].

<figure>
  <figcaption>Alice's [=Data Grant=] for Projectron to access Projects in her
  Work [=Data Registry=] at
  https://alice.example/agents/2f2f3628/40d038ea -
  <a href="snippets/alice.example/40d038ea.ttl">View</a>
  </figcaption>
  <pre class=include-code>
  path: snippets/alice.example/40d038ea.ttl
  highlight: turtle
  show: 12-23
  line-highlight: 21
  </pre>
</figure>

<figure>
  <figcaption>Alice's [=Data Grant=] for Projectron to access Tasks associated
  with authorized Work Projects at
  https://alice.example/agents/2f2f3628/0945218b -
  <a href="snippets/alice.example/0945218b.ttl">View</a>
  </figcaption>
  <pre class=include-code>
  path: snippets/alice.example/0945218b.ttl
  highlight: turtle
  show: 12-25
  line-highlight: 21
  </pre>
</figure>

When a [=Data Grant=] is assigned the `interop:Inherited` scope, the
`interop:grantee` is authorized to access only the specific
[=Data Instances=] linked via `st:references` in the [=shape tree=]
of the [=Data Grant=] linked via `interop:inheritsFromGrant`

In the example above, Alice grants Projectron the following access to
<b>only the</b> `pm-shapetrees:TaskTree` [=Data Instances=] (Tasks) in the
`alice-work-data:df4ab227` [=Data Registration=] that are linked
to `pm-shapetrees:ProjectTree` [=Data Instances=] (Projects) in the
`alice-work-data:8501f084` [=Data Registration=].

For example, the three Tasks linked from the Project [=Data Instance=]
below via `pm:hasTask` would be included in the `interop:Inherited` scope.

<figure>
  <figcaption>A Project [=Data Instance=] in `alice-work-data:8501f084` -
  <a href="snippets/work.alice.example/16e1eae9.ttl">View</a>
  </figcaption>
  <pre class=include-code>
  path: snippets/work.alice.example/16e1eae9.ttl
  highlight: turtle
  show: 9-25
  </pre>
</figure>

<figure>
  <figcaption>Valid [=access modes=] on [=Data Registration=] with Inherited scope</figcaption>
  <table class="data tree" align="left">
    <col>
    <col>
    <thead>
      <tr>
        <th>Mode</th>
        <th>Description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>`acl:Create`</td>
        <td>Create new [=Data Instances=] linked by shape tree reference.
        [=Access modes=] assigned to
        the creator on the created [=Data Instance=] should be a union of
        `interop:accessMode` and `interop:createAccessMode` modes.
        <b>acl:Create is not currently supported.
        Substitute with acl:Write or acl:Append, but may exceed intended scope
        of access.</b></td>
      </tr>
      <tr>
        <td>`acl:Read`</td>
        <td>Read [=Data Instances=] linked by shape tree reference</td>
      </tr>
      <tr>
        <td>`acl:Update`</td>
        <td>Modify [=Data Instances=] linked by shape tree reference.
        <b>`acl:Update` is not currently supported. Substitute with
        `acl:Write` or `acl:Append`, but may exceed intended scope of access.</b></td>
      </tr>
      <tr>
        <td>`acl:Append`</td>
        <td>Add new data to [=Data Instances=] linked by shape tree reference,
        without changing any existing data.</td>
      </tr>
      <tr>
        <td>`acl:Delete`</td>
        <td>Delete [=Data Instances=] linked by shape tree reference. Deletion of
        [=Data Registration=] not permitted.
        <b>`acl:Delete` is not currently supported. Substitute with `acl:Write`, but
        may exceed intended scope of access.</b></td>
      </tr>
    </tbody>
  </table>
</figure>

Issue(174):

## Access Receipt ## {#access-receipt}

A [=Social Agent=] provides an <dfn>Access Receipt</dfn> to another
[=Agent=] after granting them access to some scope of data
in an [=Access Authorization=].

[Class Definition](interop.ttl#AccessReceipt) -
[Shape Definition](interop.shex#AccessReceiptShape) -
[Shape Tree Definition](interop.tree#AccessReceiptTree)

<table class="classinfo data" align="left" id="classAccessReceipt">
  <colgroup></colgroup>
  <colgroup></colgroup>
  <colgroup></colgroup>
  <thead>
    <tr>
      <th>Property</th>
      <th>Range</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>providedAt</td>
      <td>xsd:dateTime</td>
      <td>Date and time the [=Access Receipt=] was provided</td>
    </tr>
    <tr>
      <td>grantedBy</td>
      <td>[SocialAgent](#classSocialAgent)</td>
      <td>[=Social Agent=] who granted access and delivered the [=Access Receipt=].</td>
    </tr>
  </tbody>
</table>

<figure>
  <figcaption>An example [=Access Receipt=] from Alice to Bob</figcaption>
  <pre class=include-code>
  path: snippets/alice.example/fa6d6553.ttl
  highlight: turtle
  show: 7-12
  </pre>
</figure>

The [=Authorization Agent=] of the recipient can use [[#agent-registration-discovery]] to discover the [=Social Agent Registration=]
created for them. It should use the value of <code>grantedBy</code> as the target [=Social Agent=].

## Authorization Registry ## {#access-registry}

An <dfn>Authorization Registry</dfn> is a collection of [=Access Authorizations=].

The [=Authorization Registry=] is linked to a [=Social Agent=] via their [=Registry Set=].

An [=Authorization Registry=] links to any number of registered [=Access Authorizations=].

[Class Definition](interop.ttl#AuthorizationRegistry) -
[Shape Definition](interop.shex#AuthorizationRegistryShape) -
[Shape Tree Definition](interop.tree#AuthorizationRegistryTree)

<table class="classinfo data" align="left" id="classAuthorizationRegistry">
  <colgroup></colgroup>
  <colgroup></colgroup>
  <colgroup></colgroup>
  <thead>
    <tr>
      <th>Property</th>
      <th>Range</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>hasAccessAuthorization</td>
      <td>[AccessAuthorization](interop.ttl#AccessAuthorization)</td>
      <td>Link to associated [=Access Authorizations=]</td>
    </tr>
  </tbody>
</table>

<figure>
  <figcaption>An [=Authorization Registry=] at
  https://alice.example/authorization/ -
  <a href="snippets/alice.example/authorization.ttl">View</a></figcaption>
  <pre class=include-code>
  path: snippets/alice.example/authorization.ttl
  highlight: turtle
  show: 4-11
  </pre>
</figure>

### Resource Hierarchy ### {#access-hierarchy}

<table class="data tree" align="left">
  <col>
  <col>
  <col>
  <col>
  <thead>
    <tr>
      <th>Resource</th>
      <th>Class</th>
      <th>Shape</th>
      <th>Shape Tree</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code><a href="snippets/alice.example/authorization.ttl">authorizations/</a></code></td>
      <td>[AuthorizationRegistry](#classAuthorizationRegistry)</td>
      <td>[AuthorizationRegistryShape](interop.shex#AuthorizationRegistryShape)</td>
      <td>[AuthorizationRegistryTree](interop.tree#AuthorizationRegistryTree)</td>
    </tr>
    <tr>
      <td><code>-- <a href="snippets/alice.example/e2765d6c.ttl">e2765d6c/</a></code></td>
      <td>[AccessAuthorization](#classAccessAuthorization)</td>
      <td>[AccessAuthorizationShape](interop.shex#AccessAuthorizationShape)</td>
      <td>[AccessAuthorizationTree](interop.tree#AccessAuthorizationTree)</td>
    </tr>
    <tr>
      <td><code>-- <a href="snippets/alice.example/54a1b6a0.ttl">54a1b6a0/</a></code></td>
      <td>[DataAuthorization](#classDataAuthorization)</td>
      <td>[DataAuthorizationShape](interop.shex#DataAuthorizationShape)</td>
      <td>[DataAuthorizationTree](interop.tree#DataAuthorizationTree)</td>
    </tr>
    <tr>
      <td><code>-- <a href="snippets/alice.example/0e4cb692.ttl">0e4cb692/</a></code></td>
      <td>[DataAuthorization](#classDataAuthorization)</td>
      <td>[DataAuthorizationShape](interop.shex#DataAuthorizationShape)</td>
      <td>[DataAuthorizationTree](interop.tree#DataAuthorizationTree)</td>
    </tr>
    <tr>
      <td><code>-- <a href="snippets/alice.example/47e07897.ttl">47e07897/</a></code></td>
      <td>[AccessAuthorization](#classAccessAuthorization)</td>
      <td>[AccessAuthorizationShape](interop.shex#AccessAuthorizationShape)</td>
      <td>[AccessAuthorizationTree](interop.tree#AccessAuthorizationTree)</td>
    </tr>
    <tr>
      <td><code>-- <a href="snippets/alice.example/55363f56.ttl">55363f56/</a></code></td>
      <td>[DataAuthorization](#classDataAuthorization)</td>
      <td>[DataAuthorizationShape](interop.shex#DataAuthorizationShape)</td>
      <td>[DataAuthorizationTree](interop.tree#DataAuthorizationTree)</td>
    </tr>
    <tr>
      <td><code>-- <a href="snippets/alice.example/935458cf.ttl">935458cf/</a></code></td>
      <td>[DataAuthorization](#classDataAuthorization)</td>
      <td>[DataAuthorizationShape](interop.shex#DataAuthorizationShape)</td>
      <td>[DataAuthorizationTree](interop.tree#DataAuthorizationTree)</td>
    </tr>
    <tr>
      <td><code>-- <a href="snippets/alice.example/d577d117.ttl">d577d117/</a></code></td>
      <td>[AccessAuthorization](#classAccessAuthorization)</td>
      <td>[AccessAuthorizationShape](interop.shex#AccessAuthorizationShape)</td>
      <td>[AccessAuthorizationTree](interop.tree#AccessAuthorizationTree)</td>
    </tr>
    <tr>
      <td><code>-- <a href="snippets/alice.example/2d1568fb.ttl">2d1568fb/</a></code></td>
      <td>[DataAuthorization](#classDataAuthorization)</td>
      <td>[DataAuthorizationShape](interop.shex#DataAuthorizationShape)</td>
      <td>[DataAuthorizationTree](interop.tree#DataAuthorizationTree)</td>
    </tr>
    <tr>
      <td><code>-- <a href="snippets/alice.example/5ca4692b.ttl">5ca4692b/</a></code></td>
      <td>[DataAuthorization](#classDataAuthorization)</td>
      <td>[DataAuthorizationShape](interop.shex#DataAuthorizationShape)</td>
      <td>[DataAuthorizationTree](interop.tree#DataAuthorizationTree)</td>
    </tr>
    <tr>
      <td><code>-- <a href="snippets/alice.example/4460dce3.ttl">4460dce3/</a></code></td>
      <td>[AccessAuthorization](#classAccessAuthorization)</td>
      <td>[AccessAuthorizationShape](interop.shex#AccessAuthorizationShape)</td>
      <td>[AccessAuthorizationTree](interop.tree#AccessAuthorizationTree)</td>
    </tr>
    <tr>
      <td><code>-- <a href="snippets/alice.example/f800b10c.ttl">f800b10c/</a></code></td>
      <td>[DataAuthorization](#classDataAuthorization)</td>
      <td>[DataAuthorizationShape](interop.shex#DataAuthorizationShape)</td>
      <td>[DataAuthorizationTree](interop.tree#DataAuthorizationTree)</td>
    </tr>
    <tr>
      <td><code>-- <a href="snippets/alice.example/ec6057d9.ttl">ec6057d9/</a></code></td>
      <td>[DataAuthorization](#classDataAuthorization)</td>
      <td>[DataAuthorizationShape](interop.shex#DataAuthorizationShape)</td>
      <td>[DataAuthorizationTree](interop.tree#DataAuthorizationTree)</td>
    </tr>
    <tr>
      <td><code>-- <a href="snippets/alice.example/cce01253.ttl">cce01253/</a></code></td>
      <td>[AccessAuthorization](#classAccessAuthorization)</td>
      <td>[AccessAuthorizationShape](interop.shex#AccessAuthorizationShape)</td>
      <td>[AccessAuthorizationTree](interop.tree#AccessAuthorizationTree)</td>
    </tr>
    <tr>
      <td><code>-- <a href="snippets/alice.example/8f178288.ttl">8f178288/</a></code></td>
      <td>[DataAuthorization](#classDataAuthorization)</td>
      <td>[DataAuthorizationShape](interop.shex#DataAuthorizationShape)</td>
      <td>[DataAuthorizationTree](interop.tree#DataAuthorizationTree)</td>
    </tr>
    <tr>
      <td><code>-- <a href="snippets/alice.example/6531c8e2.ttl">6531c8e2/</a></code></td>
      <td>[DataAuthorization](#classDataAuthorization)</td>
      <td>[DataAuthorizationShape](interop.shex#DataAuthorizationShape)</td>
      <td>[DataAuthorizationTree](interop.tree#DataAuthorizationTree)</td>
    </tr>
    <tr>
      <td><code>-- <a href="snippets/alice.example/0e36ba8f.ttl">0e36ba8f/</a></code></td>
      <td>[DataAuthorization](#classDataAuthorization)</td>
      <td>[DataAuthorizationShape](interop.shex#DataAuthorizationShape)</td>
      <td>[DataAuthorizationTree](interop.tree#DataAuthorizationTree)</td>
    </tr>
    <tr>
      <td><code>-- <a href="snippets/alice.example/ca14a518.ttl">ca14a518/</a></code></td>
      <td>[DataAuthorization](#classDataAuthorization)</td>
      <td>[DataAuthorizationShape](interop.shex#DataAuthorizationShape)</td>
      <td>[DataAuthorizationTree](interop.tree#DataAuthorizationTree)</td>
    </tr>
    <tr>
      <td><code>-- <a href="snippets/alice.example/3e94161f.ttl">3e94161f/</a></code></td>
      <td>[DataAuthorization](#classDataAuthorization)</td>
      <td>[DataAuthorizationShape](interop.shex#DataAuthorizationShape)</td>
      <td>[DataAuthorizationTree](interop.tree#DataAuthorizationTree)</td>
    </tr>
    <tr>
      <td><code>-- <a href="snippets/alice.example/60e37fe3.ttl">60e37fe3/</a></code></td>
      <td>[DataAuthorization](#classDataAuthorization)</td>
      <td>[DataAuthorizationShape](interop.shex#DataAuthorizationShape)</td>
      <td>[DataAuthorizationTree](interop.tree#DataAuthorizationTree)</td>
    </tr>
  </tbody>
</table>

The [=Authorization Registry=] resources MAY use any resource or subject name.

The resource names for [=Access Grants=] <em class="rfc2119">SHOULD</em>
be unpredictable.
